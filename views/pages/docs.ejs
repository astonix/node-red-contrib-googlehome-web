<% include ../fragments/header.ejs %>
<div class="container main">
	<nav class="side-menu">
    <ul class="nav nav-pills nav-stacked">
      <li><a href="#createAccount">Create Account</a></li>
      <li><a href="#createDevices">Create Devices</a></li>
      <li><a href="#linkAccount">Link Account</a></li>
      <li><a href="#installNodes">Install Nodes</a></li>
      <li><a href="#buildFlows">Building Flows</a></li>
      <li><a href="#configNodes">Configure Nodes</a></li>
      <li><a href="#outofband">Updating Google Homegraph without a command</a></li>
  	</ul>
  </nav>

	<div class="container main-content">
		<h1>Documentation</h1>
		<p>Welcome to the documentation for the Google Assistant Smart Home Action Node-RED node.</p>

		<h2 id="createAccount">Create Account</h2>
		<p>Before starting you will need to create an account, if you have not yet done this you can 
			do this <a href="/register" target="_blank">here</a>.</p>
		<p>You can now create your first device using the wizard to pick the type and traits you need.</p>
		<p>When you create the account please use a real email address. This address will only ever be 
		used to allow you to reset your password and to send you messages about the state of the service.</p>

		<!--
		<h2 id="googleGroup">Join the Google Group</h2>
		<p>To be able to access the Action you will need to join the following Google Group with the same 
		Google ID that you use with Google Assistant.</p>

		<p><a href="https://groups.google.com/forum/#!forum/node-red-google-home-bridge">
		https://groups.google.com/forum/#!forum/node-red-google-home-bridge</a></p>

		<p>Any email addresses linked to Google accounts will never be used or released to any 3rd parties.
		Only if they match the email address linked to the account created in the previous step, and then
	  only for the reasons already stated.</p>

		-->

		<h2 id="createDevices">Create Devices</h2>
		<p>Once you have an account you can start creating devices to expose to the Goolge Assistant.</p>

		<p>Device Types:</p>
		<ul>
			<li>Light</li>
			<li>Switch</li>
			<li>Outlet</li>
			<li>Blind</li>
			<li>Door</li>
			<li>Thermostat</li>
			<li>Fan</li>
			<li>Heater</li>
			<li>Pureifier</li>
			<li>Scene</li>
		</ul>

		<p>Traits:</p>
		<ul>
    	<li>OnOff</li>
    	<li>Brightness</li>
    	<li>ColorSetting</li>
    	<li>FanSpeed</li>
    	<li>TemperatureSetting</li>
    	<li>OpenClose</li>
    </ul>

    <p>There are some extras in the lists in the wizard for creating devices that are disabled, they are 
		there while I work out a good way to expose their triats so they can be easily configured.</p>
 
		<h2 id="linkAccount">Link Account</h2>
		<p>Now you have and account you can enable action in the Google Home app and link the account 
		you've just created.</p>
		<ul>
			<li>
				<img src="/images/google-home-add.png">
				<p>First click the "Add" button.</p>
			</li>
			<li>
				<img src="/images/google-home-setup.png">
				<p>Then "Set up device"</p>
			</li>
			<li>
				<img src="/images/google-home-works.png">
				<p>And next select "Works with Google" and then finally find "NR-GAB" in the list with the following icon.</p>
				<img style="width: 42px; height: 42px;" src="/images/icon.png">
			</li>
			<li>
				<p>Finally sign in with the username and password you created earlier.</p>
				<img src="/images/oauth.png">
			</li>
		</ul>

		<p></p>

		<h2 id="installNodes">Install Nodes</h2>
		<p>There are 2 ways to install the required Node-RED nodes.</p>
		<ul>
			<li>First using the pallet manger
				<p>Search for node-red-contrib-googlehome</p></li>
			<li>Second on the command line
				<p>Make sure you are in the Node-RED userDir (normally ~/.node-red) and then run</p>
				<code>npm install node-red-contrib-googlehome</code></li>
		</ul>

		<h2 id="buildFlows">Building Flows</h2>
		<p>There are 2 nodes available in the pallet, <em>google home</em> and <em>google home response</em>.
		For most situations you can get away with using the <em>google home</em> as this is the node that
	  output the commands when you ask Google Assistant to do something.</p>

		<img src="images/nodes.png">

		<h3 id="configNodes">Configure Nodes</h3>
		<p>When you drag the first Google Home node on to the canvas you will need to create a config 
		node. To do this, click on the pencil icon next to the first input. This will open a new dialog,
		where you can enter the same username/password from the first step and hit the "Add" button. <strong>For
		all subsequent nodes you should just pick the entry from the drop down that matches
		your username.</strong></p>

		<p>Once you have picked the right config node, after a second or so the list of devices should
		be populated. If you have recently created or deleted a new device then you can hit the refresh
		button to the right of the drop down and the node will update it's list from the service.</p>

		<img src="images/NewAccount.png">

		<p>To start with you should leave the <em>Auto Acknowledge</em> box ticked. This will assume that 
		any incoming command has succeed and report that back to the Google Homegraph<sup>1</sup>.</p>

		<p>The Google Home node will output a message object that looks like the following when a command 
		arrives:</p>

		<pre>{
  topic: "",
  name: "Light"
  raw: {},
  payload: {
    command: "action.devices.commands.OnOff",
    params: {
      on: true
    }
  }
}</pre>

    <p>The <em>msg.payload.command</em> value will be one of the commands identified in the 
    <a href="https://developers.google.com/actions/smarthome/traits/">traits</a> identifiers from the 
    Google Smart Home Action API. The <em>msg.payload.params</em> will hold the settings to be updated
    on the device.</p>

    <p>Example messages from the supported triats (click on trait name to expand):</p>
    <ul>
    	<li><span class="toggle" data-toggle="collapse" data-target="#OnOFF">OnOff</span>
    	<div id="OnOFF" class="collapse">
        <pre>{
  topic: "",
  name: "Light"
  raw: {},
  payload: {
    command: "action.devices.commands.OnOff",
    params: {
      on: true
    }
  }
}</pre>
        </div>
    	</li>
    	<li><span class="toggle" data-toggle="collapse" data-target="#Brightness">Brightness</span>
    		<div id="Brightness" class="collapse">
    			<pre>{
  topic: "",
  name: "Light"
  raw: {},
  payload: {
    command: "action.devices.commands.BrightnessAbsolute",
    params: {
      brightness: 30
    }
  }
}</pre>
    		</div>
    	</li>
    	<li><span class="toggle" data-toggle="collapse" data-target="#ColorSetting">ColorSetting</span>
    		<div id="ColorSetting" class="collapse">
    		  <p>Colours in RGB</p>
    			<pre>{
  topic: "",
  name: "Light"
  raw: {},
  payload: {
    command: "action.devices.commands.ColorAbsolute",
    params: {
      "color": {
       	"name": "magenta",
        "spectrumRGB": 16711935
      }
    }
  }
}</pre>
<p>Colour Temperature in K</p>
<pre>{
  topic: "",
  name: "Light"
  raw: {},
  payload: {
    command: "action.devices.commands.ColorAbsolute",
    params: {
      "color": {
       	"name": "warm white",
        "temperature": 4000
      }
    }
  }
}</pre>
    		</div>
    	</li>
    	<li>FanSpeed</li>
    	<li>TemperatureSetting</li>
    	<li>OpenClose</li>
    </ul>

    <p>More traits and configuration options for traits when I get time to work out how to nicely expose them.</p>

    <h3 id="response">Sending a response</h3>
    <p>If you are triggering an action that may fail, then you can untick the <em>Auto Acknowledge</em> box.
    When you do this you will have to terminate the flow with a Google Home Response node.</p>
    <p>You need to configure the response node to point to the same device as the input node it is connected
    to by selecting the account name and device name from the dropdowns provided.</p>

		<img src="images/response-config.png">

    <p>This node takes the same <code>msg.payload</code> format as output by the input node. The 
    <code>msg.payload.params</code> should be updated to match the new state of the device.</p>

		<h3 id="outofband">Updating Google Homegraph state without a command</h3>
		<p>Google Assistant keeps track of the state of all devices to allow it to keep the GUI in the App or
		on devices with screens up to date. This informaton is kept in something called the Homegraph.</p>
		<p>If you are updating the device state without using Google Assistant you can  can update the Homegraph
		 using the Google Home Response node.</p>

		<img style="width: 75%" src="images/flow-with-response.png">

		<p>In the case above the light is turned on, and the state sent back to the Home Graph, but 5 mins later
		the trigger node turns the light back off and updates the Home Graph again with out the need for a new
	  input message.</p>

	</div>
</div>
<% include ../fragments/footer.ejs %>