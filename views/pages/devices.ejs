<% include ../fragments/header.ejs %>
  <div class="container main-content">
    <h1>Devices</h1>
    <div class="deviceHeader">
      <div style="width:200px; float:left" ><strong>Name</strong></div>
      <div style="width:200px; float:left" ><strong>Room</strong></div>
      <div style="width:200px; float:left"><strong>Type</strong></div>
      <div class="deviceActions"><strong>Traits</strong></div>
    </div>
    <% devices.forEach(function(device){ %>
    <div class="deviceRow">
      <div class="device">
      <div class="deviceName">
        <strong><%= device.name.name %></strong><br>
        <% device.name.nicknames.forEach(function(nick){ %>
        <small><%= nick %><br></small>
        <%});%>
      </div>
      <div class="room"><%= device.roomHint %></div>
      <div class="deviceDescription"><img src="/images/<%= device.type %>.png" title="<%= device.type %>"></div>
      <div class="deviceActions">
        <% device.traits.forEach(function(action){ %>
          <img class="action" src="/images/<%= action %>.png" title="<%= action %>">
        <% }); %>
      </div>
      </div>
      <div>
      <button onclick="edit('<%= device._id %>')">Edit</button>
      <button onclick="deleteDevice('<%= device._id%>')">Delete</button>
      </div>
    </div>
    <% }); %>
    <div style="padding-top: 10px;">
      <button onclick="addDevice();">Add Device</button>
    </div>
  </div>

  <div id="dialog" hidden>
    <input id="devID" type="hidden">
    <label for="friendlyName">Name: </label><br>
    <input id="friendlyName" type="text">
    <label for="roomHint">Room (optional): </label>
    <input id="roomHint" type="text">
    <!-- <span>Optional</span> -->
    <fieldset id="deviceType">
      <legend>Type</legend>
      <div style="display: flex; width: 100%">
        <div class="types">
          <input type="radio" name="type" value="action.devices.types.SWITCH" checked="true" onclick="switchType(this.value);">Switch</input><br/>
          <input type="radio" name="type" value="action.devices.types.OUTLET" onclick="switchType(this.value);">Outlet</input><br/>
          <input type="radio" name="type" value="action.devices.types.LIGHT" onclick="switchType(this.value);">Light</input><br/>
        </div>
        <div class="types">
          <input type="radio" name="type" value="action.devices.types.THERMOSTAT" onclick="switchType(this.value);">Thermostat</input><br/>
          <input type="radio" name="type" value="action.devices.types.VACUUM" disabled onclick="switchType(this.value);">Vacuum</input><br/>
          <input type="radio" name="type" value="action.devices.types.SCENE" onclick="switchType(this.value);">Scene</input><br/>
        </div>
        <div class="types">
          <input type="radio" name="type" value="action.devices.types.FAN" onclick="switchType(this.value);">Fan</input><br/>
          <input type="radio" name="type" value="action.devices.types.HEATER" onclick="switchType(this.value);">Heater</input><br/>
          <input type="radio" name="type" value="action.devices.types.AIRPURIFIER" onclick="switchType(this.value);">Purifier</input><br/>
        </div>
      </div>
    </fieldset>
    <fieldset id="deviceTraits">
      <legend>Traits</legend>
      <div style="display: flex; width: 100%">
        <div class="traits">
          <fieldset id="OnOffTraits">
            <label for="OnOff">On/Off: </label>
            <input type="checkbox" name="trait" id="OnOff" value="action.devices.traits.OnOff" checked="true">
          </fieldset>
          <fieldset id="lightTraits" disabled>
            <label for="Brightness">Brightness: </label>
            <input type="checkbox" name="trait" id="Brightness" value="action.devices.traits.Brightness"><br/>
            <label for="ColorTemperature">Color Settings: </label>
            <input type="checkbox" name="trait" id="ColorSetting" value="action.devices.traits.ColorSetting">
          </fieldset>
        </div>
        <div class="traits">
          <fieldset id="temperatureTraits" disabled>
            <label for="TemperatureSetting">Temperature: </label>
            <input type="checkbox" name="trait" id="TemperatureSetting" value="action.devices.traits.TemperatureSetting">
          </fieldset>
          <fieldset id="fanTraits" disabled >
            <label for="Fan">Fan Speed: </label>
            <input type="checkbox" name="trait" id="FanSetting" value="action.devices.traits.FanSpeed">
          </fieldset>
          <fieldset id="sceneTraits" disabled hidden>
            <label for="Scene">Scene: </label>
            <input type="checkbox" name="trait" id="Scene" value="action.devices.traits.Scene">
          </fieldset>
           <fieldset id="vacuumTraits" disabled>
            <label for="Scene">Start/Stop: </label>
            <input type="checkbox" name="trait" id="StartStop" value="action.devices.traits.StartStop"><br>
            <label for="Scene">Run Cycle: </label>
            <input type="checkbox" name="trait" id="RunCycle" value="action.devices.traits.RunCycle">
          </fieldset>
        </div>
      </div>
      <fieldset id="reportState" hidden>
          <legend>Report State</legend>
          <label for="willReportState">Will Report State: </label>
          <input type="checkbox" id="willReportState" name="willReportState">
        </fieldset>
    </fieldset>
  </div>

  <script type="application/javascript">
    $('#dialog').dialog({
      autoOpen: false,
      dragable: false,
      modal: true,
      position: {
        my: "center",
        at: "center",
        of: window,
        using: function( pos ) {
          $(this).css("top", '55px');
          $(this).css("left", pos.left);
        }
      },
      title: "Add New Device",
      dialogClass: "no-close",
      width: "350px",
      buttons:[
        {
          text: 'OK',
          click: function(){
            var devID = $('#devID').val();
            var name = $('#friendlyName').val();
            if (devID === '') {
              var dev = {
                type: $('input[name=type]:checked').val(),
                traits: [],
                roomHint: $('#roomHint').val(),
                willReportState: true,
                name:{
                  name: name,
                  nicknames: [
                    name
                  ]
                },
                attributes: {},
                state: {
                  online: true
                }
              };

              $('input[name=trait]').each(function(index){
                if (this.checked) {
                  dev.traits.push(this.value);
                }
              });
              if (dev.traits.includes("action.devices.types.SCENE")) {
                dev.attributes["sceneReversible"] = true
              }

              if (dev.traits.includes("action.devices.traits.OnOff")) {
                Object.assign(dev.state, {
                  on: false
                });
              }

              if (dev.traits.includes("action.devices.traits.ColorSetting")) {
                dev.attributes["colorModel"] = "rgb";
                dev.attributes["colorTemperatureRange"]= {
                  temperatureMinK: 2000,
                  temperatureMaxK: 6500
                }
                dev.attributes["commandOnlyColorSetting"] = true
              }

              if (dev.traits.includes("action.devices.traits.TemperatureSetting")) {
                dev.attributes["availableThermostatModes"] = "off,heat,cool,on";
                dev.attributes["thermostatTemperatureUnit"] = "C";
                dev.state = Object.assign(dev.state, {
                  thermostatMode: "heat",
                  thermostatTemperatureSetpoint: 20,
                  thermostatTemperatureAmbient: 20
                });
              }

              if (dev.traits.includes("action.devices.traits.FanSpeed")) {
                dev.attributes["availableFanSpeeds"] = {
                  speeds: [
                    {
                      speed_name: "Low",
                      speed_values: [
                        {
                          speed_synonym: [
                            "low", "slow"
                          ],
                          lang: "en"
                        }
                      ]
                    },
                    {
                      speed_name: "Med",
                      speed_values: [
                        {
                          speed_synonym: [
                            "medium", "mid"
                          ],
                          lang: "en"
                        }
                      ]
                    },
                    {
                      speed_name: "High",
                      speed_values: [
                        {
                          speed_synonym: [
                            "high", "full","max"
                          ],
                          lang: "en"
                        }
                      ]
                    }
                  ],
                  ordered: true
                };
                dev.attributes["reversible"] = true;
                dev.state = Object.assign(dev.state, {
                  fanSpeed: "Low"
                })
              }

              console.log(dev);
              if (name && dev.type && dev.traits.length > 0) {
                $.ajax({
                  url: '/user/devices',
                  method: 'PUT',
                  data: JSON.stringify(dev),
                  contentType: "application/json",
                  success: function(data){
                    document.location.reload();
                  },
                  dataType: 'json'
                }).fail(function(){
                  alert('failed to create device');
                });
                $(this).dialog( "close" );
              } else {
                alert('You need to set a name');
              }
            } else {
              //update
              console.log("update");
              var dev = devices[devID];
              console.log(dev);
              dev.type = $('input[name=type]:checked').val();
              dev.roomHint = $('#roomHint').val();
              dev.traits = [];
              dev.attributes = {};
              dev.willReportState = true;

              $('input[name=trait]').each(function(index){
                if (this.checked) {
                  dev.traits.push(this.value);
                }
              });

              if (dev.traits.includes("action.devices.types.SCENE")) {
                dev.attributes["sceneReversible"] = true
              }


              if (dev.traits.includes("action.devices.traits.ColorSetting")) {
                dev.attributes["colorModel"] = "rgb";
                dev.attributes["colorTemperatureRange"]= {
                  temperatureMinK: 2000,
                  temperatureMaxK: 6500
                }
                dev.attributes["commandOnlyColorSetting"] = true
              }

              if (dev.traits.includes("action.devices.traits.TemperatureSetting")) {
                dev.attributes["availableThermostatModes"] = "off,heat,cool,on";
                dev.attributes["thermostatTemperatureUnit"] = "C";
                dev.state = Object.assign({
                  thermostatMode: "heat",
                  thermostatTemperatureSetpoint: 20,
                  thermostatTemperatureAmbient: 20
                }, dev.state);
              }

              if (dev.traits.includes("action.devices.traits.FanSpeed")) {
                dev.attributes["availableFanSpeeds"] = {
                  speeds: [
                    {
                      speed_name: "Low",
                      speed_values: [
                        {
                          speed_synonym: [
                            "low", "slow"
                          ],
                          lang: "en"
                        }
                      ]
                    },
                    {
                      speed_name: "Med",
                      speed_values: [
                        {
                          speed_synonym: [
                            "medium", "mid"
                          ],
                          lang: "en"
                        }
                      ]
                    },
                    {
                      speed_name: "High",
                      speed_values: [
                        {
                          speed_synonym: [
                            "high", "full","max"
                          ],
                          lang: "en"
                        }
                      ]
                    }
                  ],
                  ordered: true
                };
                dev.attributes["reversible"] = true;
                dev.state = Object.assign({
                  fanSpeed: "Low"
                }, dev.state)

              }

              console.log(dev);
              console.log(dev.attributes);
              $.ajax({
                url: '/user/devices/' + dev._id,
                method: 'POST',
                data: JSON.stringify(dev),
                contentType: "application/json",
                success: function(data){
                  document.location.reload();
                },
                dataType: 'json'
              }).fail(function(){
                alert('failed to update device')
              });
              $(this).dialog("close");
            }
          }
        },
        {
          text: 'Cancel',
          click: function(){
            reset();
            $(this).dialog( "close" );
          }
        }
      ]
    });

    function clearDevice() {
      $('#devID').val("");
      $('#friendlyName').val("");
      $('#friendlyName').prop('readonly', false);
      $('#roomHint').val("");
      $('input[name=type]').each(function(index){
        this.checked = false;
      });
      $('input[name=trait]').each(function(index){
        this.checked = false;
      });
      $("#dialog")
    }

    function edit(id) {
      clearDevice();
      $("#dialog").dialog({
        title: "Edit Device"
      }).dialog("open");
      var device = devices[id];
      $('#devID').val(device._id);
      $('#friendlyName').val(device.name.name);
      $('#friendlyName').prop('readonly', true);
      $('#roomHint').val(device.roomHint);
      switchType(device.type);
      $('input[name=type][value="' + device.type + '"]').prop('checked', true);
      device.traits.forEach(function(trait){
        var stuff = trait.split('\.');
        $('#'+stuff[stuff.length-1]).prop('checked',true);
      });
    }

    function addDevice(){
      clearDevice();
      $("#dialog").dialog({title: "Add New Device"}).dialog("open");
    }

    function deleteDevice(id) {
      var answer = confirm("Are you sure you want to delete this device?");
      if (answer) {
        $.ajax({
          url:"/user/devices/" + id,
          type: 'DELETE',
          success: function(data, status, jqXHR){
            document.location.reload();
          },
          error: function(xhr, status, err) {
            console.log(err);
          }
        });
      }
    }

    function switchType(type) {
      switch(type) {
        case 'action.devices.types.SWITCH':
        case 'action.devices.types.OUTLET':
          $('#OnOff').prop('checked',true);
          $('#Brightness').prop('checked', false);
          $('#ColorTemperature').prop('checked', false);
          $('#ColorSpectrum').prop('checked',false);
          $('#TemperatureSetting').prop('checked',false);
          $('#FanSetting').prop('checked',false);
          $('#Scene').prop('checked', false);

          $('#OnOffTraits').removeAttr('disabled');
          $('#lightTraits').attr('disabled','');
          $('#temperatureTraits').attr('disabled','');
          $('#sceneTraits').attr('disabled','');
          $('#fanTraits').attr('disabled','');
          $('#reportState').removeAttr('disabled');
          
          break;
        case 'action.devices.types.LIGHT':
          $('#OnOff').prop('checked', true);
          $('#TemperatureSetting').prop('checked', false);
          $('#FanSetting').prop('checked',false);
          $('#Scene').prop('checked', false);

          $('#OnOffTraits').removeAttr('disabled');
          $('#lightTraits').removeAttr('disabled');
          $('#temperatureTraits').attr('disabled','');
          $('#sceneTraits').attr('disabled','');
          $('#fanTraits').attr('disabled','');
          $('#reportState').removeAttr('disabled');
          break;
        case 'action.devices.types.THERMOSTAT':
          $('#OnOff').prop('checked',false);
          $('#Brightness').prop('checked', false);
          $('#ColorTemperature').prop('checked', false);
          $('#ColorSpectrum').prop('checked', false);
          $('#TemperatureSetting').prop('checked',true);
          $('#FanSetting').prop('checked',false);
          $('#Scene').prop('checked', false);

          $('#OnOffTraits').attr('disabled','');
          $('#lightTraits').attr('disabled','');
          $('#temperatureTraits').removeAttr('disabled');
          $('#sceneTraits').attr('disabled','');
          $('#fanTraits').attr('disabled','');
          $('#reportState').removeAttr('disabled');
          break;
        case 'action.devices.types.FAN':
        case 'action.devices.types.AIRPURIFIER':
          $('#OnOff').prop('checked', true);
          $('#Brightness').prop('checked', false);
          $('#ColorTemperature').prop('checked', false);
          $('#ColorSpectrum').prop('checked', false);
          $('#TemperatureSetting').prop('checked',false);
          $('#FanSetting').prop('checked',true);
          $('#Scene').prop('checked', false);

          $('#OnOffTraits').removeAttr('disabled');
          $('#lightTraits').attr('disabled','');
          $('#temperatureTraits').removeAttr('disabled');
          $('#sceneTraits').attr('disabled','');
          $('#reportState').removeAttr('disabled');
          $('#fanTraits').removeAttr('disabled');
          break;
        case 'action.devices.types.SCENE':
          $('#OnOff').prop('checked',false);
          $('#Brightness').prop('checked', false);
          $('#ColorTemperature').prop('checked', false);
          $('#ColorSpectrum').prop('checked', false);
          $('#TemperatureSetting').prop('checked',false);
          $('#FanSetting').prop('checked',false);
          $('#Scene').prop('checked',true);

          $('#willReportState').prop('checked', false);
          $('#reportState').attr('disabled','');

          $('#OnOffTraits').attr('disabled','');
          $('#lightTraits').attr('disabled','');
          $('#temperatureTraits').attr('disabled','');
          $('#fanTraits').attr('disabled','');
          $('#sceneTraits').removeAttr('disabled');
          break;
        case 'action.devices.types.HEATER':
          $('#OnOff').prop('checked', true);
          $('#Brightness').prop('checked', false);
          $('#ColorTemperature').prop('checked', false);
          $('#ColorSpectrum').prop('checked', false);
          $('#TemperatureSetting').prop('checked',true);
          $('#FanSetting').prop('checked',true);
          $('#Scene').prop('checked', false);

          $('#OnOffTraits').removeAttr('disabled');
          $('#lightTraits').attr('disabled','');
          $('#temperatureTraits').removeAttr('disabled');
          $('#sceneTraits').attr('disabled','');
          $('#reportState').removeAttr('disabled');
          $('#fanTraits').removeAttr('disabled');
          break;
      }
    }

    function reset() {
      $('#devID').val("");
      $('#OnOff').prop('checked',true);
      $('#Brightness').prop('checked', false);
      $('#ColorTemperature').prop('checked', false);
      $('#ColorSpectrum').prop('checked', false);
      $('#TemperatureSetting').prop('checked',false);
      $('#Scene').prop('checked',false);

      $('#OnOffTraits').removeAttr('disabled');
      $('#lightTraits').attr('disabled','');
      $('#temperatureTraits').attr('disabled','');
      $('#sceneTraits').attr('disabled','');

      $('input[name=type]').each(function(index){
        if (this.value === 'action.devices.types.SWITCH') {
          this.checked = true;
        }
      });

    }

    var devices = {};
    <%- JSON.stringify(devices) %>.forEach(function(device){
      devices[device._id] = device;
    });
  </script>
<% include ../fragments/footer.ejs %>